#!/usr/bin/env node

// transpile:testwa

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _appiumLogger = require('appium-logger');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var _appiumIosDriverNode_modulesAppiumUiauto = require('../../../../appium-ios-driver/node_modules/appium-uiauto');

var _asyncbox = require('asyncbox');

var logger = (0, _appiumLogger.getLogger)("TestWa");
var logData = (0, _appiumLogger.getLogger)("TestWaData");

var fs = require('fs'),
    temp = require('temp'),
    _ = require('underscore'),
    testwaresponse = require('./middleware.js'),
    testData = require('./testcasedata.js'),
    async = require('async'),
    ncp = require('ncp').ncp,
    querystring = require("querystring"); //testwa

var testwa = {};
var screenIndex = 0;
var op_alue = "";
var memoryinfo = "0";
var cpurate = "0";
var packagename = "";
var sessionid = "";
var testsuit = "";
var testcaseid = "";
var deviceid = "";
var genTool = false;

testwa.heartbeat = function (args) {
    if (args.waHeartbeat) {
        var returnStatus = { status: 0 };
        //use testwaDeviceId instead of udid for MAC
        if (args.udid) {
            testwaresponse.SendStartStatus(returnStatus, args.udid, args.testcaselogId, args.port);
        } else {
            testwaresponse.SendStartStatus(returnStatus, args.testwaDeviceId, args.testcaselogId, args.port);
        }
    }
};

testwa.responseNoDriver = function (driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var args = driver.args;

    var testDataReply = _.clone(testData);
    testDataReply.testdata.description = "No Driver found for this session, probably appium error, please restart appium!";
    if (args.genTool) {
        // console.log(testDataReply);
        logData.error(testDataReply);
    } else {
        testwaresponse.SendDataNativeApp(testDataReply.testdata);
    }
};

testwa.responseDeleteSession = function (driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var testDataReply = _.clone(testData);
    testDataReply.testdata.status = 0;
    testDataReply.testdata.value = httpResBody.value;
    testDataReply.testdata.runtime = 0;
    testDataReply.testdata.sessionId = httpResBody.sessionId;
    testDataReply.testdata.deviceId = deviceid;
    testDataReply.testdata.testSuit = testsuit;
    testDataReply.testdata.testcaseId = testcaseid;
    testDataReply.testdata.command = { "action": "停止测试", "params": "" };
    testDataReply.testdata.screenshotPath = "";

    var myDate = new Date();
    var endTime = myDate.getTime();
    testDataReply.runtime = endTime - req._startTime.getTime();
    testDataReply.status = httpResBody.status;
    if (null !== httpResBody.value) {
        testDataReply.description = httpResBody.value.message ? httpResBody.value.message : "";
    }

    if (genTool) {
        // console.log(testDataReply);
        logData.error(testDataReply);
    } else {
        testwaresponse.SendDataNativeApp(testDataReply.testdata);
    }
};

testwa.handler = function callee$0$0(driver, req, httpStatus, httpResBody, commond, jsonObj) {
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!(commond !== 'deleteSession')) {
                    context$1$0.next = 14;
                    break;
                }

                if (!driver.sessions[httpResBody.sessionId]) {
                    context$1$0.next = 11;
                    break;
                }

                if (!(driver.sessions[httpResBody.sessionId].constructor.name === 'AndroidDriver')) {
                    context$1$0.next = 7;
                    break;
                }

                context$1$0.next = 5;
                return _regeneratorRuntime.awrap(testwa.getActionAndroid(driver, req, httpStatus, httpResBody, commond, jsonObj));

            case 5:
                context$1$0.next = 9;
                break;

            case 7:
                context$1$0.next = 9;
                return _regeneratorRuntime.awrap(testwa.getActionIOS(driver, req, httpStatus, httpResBody, commond, jsonObj));

            case 9:
                context$1$0.next = 12;
                break;

            case 11:
                //no driver found , response error
                testwa.responseNoDriver(driver, req, httpStatus, httpResBody, commond, jsonObj);

            case 12:
                context$1$0.next = 15;
                break;

            case 14:
                //deleteSession
                testwa.responseDeleteSession(driver, req, httpStatus, httpResBody, commond, jsonObj);

            case 15:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

//Android driver
testwa.getTranslationAction = function (commond, jsonObj) {
    if (commond === "createSession") {
        return ["创建会话", ""];
    } else if (commond === "findElements") {
        return ["查找元素（" + jsonObj.using + "）", jsonObj.value];
    } else if (commond === "findElement") {
        return ["查找元素（" + jsonObj.using + "）", jsonObj.value];
    } else if (commond === "click") {
        return ["点击", ""];
    } else if (commond === "setValue") {
        return ["输入", jsonObj.value.join("")];
    } else if (commond === "implicitWait") {
        return ["等待", jsonObj.ms + "ms"];
    } else if (commond === "getWindowSize") {
        return ["获取屏幕大小", ""];
    } else if (commond === "performTouch") {
        if (jsonObj.actions.length === 1) {
            var action = jsonObj.actions[0];
            if (action.action === "longPress") {
                var options = action.options;
                return ["长按", "(x:" + options.x + ",y:" + options.y + ")" + options.duration + "ms"];
            }
        } else if (jsonObj.actions.length === 4) {
            var action1 = jsonObj.actions[0];
            var action3 = jsonObj.actions[2];
            if (action1.action === "press" && action3.action === "moveTo") {
                var options1 = action1.options;
                var options3 = action3.options;
                return ["滑屏", "从(x:" + options1.x + ",y:" + options1.y + ")到(x:" + options3.x + ",y:" + options3.y + ")"];
            }
        }
    }

    return [commond, jsonObj.value];
};
testwa.genRsp = function (driver, req, httpStatus, httpResBody, action, param, cpuRate, memoryInfo) {
    var Driver = driver.sessions[httpResBody.sessionId];
    var caps = Driver.caps;
    var args = driver.args;

    var testDataReply = _.clone(testData);
    testDataReply.testdata.status = httpStatus;
    testDataReply.testdata.value = httpResBody.value;
    testDataReply.testdata.runtime = 0;
    testDataReply.testdata.cpurate = cpuRate ? cpuRate : "0";
    testDataReply.testdata.memory = memoryInfo ? memoryInfo : "0";
    testDataReply.testdata.sessionId = httpResBody.sessionId;
    testDataReply.testdata.deviceId = deviceid = caps ? caps.deviceName : "";
    testDataReply.testdata.testSuit = testsuit = caps ? caps.testSuit : "";
    testDataReply.testdata.testcaseId = testcaseid = caps ? caps.testcaseId : "";
    testDataReply.testdata.command = { "action": action, "params": param };

    var myDate = new Date();
    var endTime = myDate.getTime();
    testDataReply.testdata.runtime = endTime - req._startTime.getTime();
    testDataReply.testdata.status = httpResBody.status;
    if (null !== httpResBody.value) {
        testDataReply.testdata.description = httpResBody.value.message ? httpResBody.value.message : "";
    }

    return [testDataReply, endTime];
};
testwa.getActionAndroid = function callee$0$0(driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var Driver, caps, args, _getTranslationAction, _getTranslationAction2, action, param, _ref, _ref2, memoryInfo, cpuRate, _testwa$genRsp, _testwa$genRsp2, testDataReply, endTime, screenshotPath, tempPng;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                Driver = driver.sessions[httpResBody.sessionId];
                caps = Driver.caps;
                args = driver.args;

                genTool = args.genTool;
                // let action = commond;
                // let param = jsonObj.value ? jsonObj.value:jsonObj.ms;

                _getTranslationAction = this.getTranslationAction(commond, jsonObj);
                _getTranslationAction2 = _slicedToArray(_getTranslationAction, 2);
                action = _getTranslationAction2[0];
                param = _getTranslationAction2[1];
                context$1$0.next = 10;
                return _regeneratorRuntime.awrap(this.getPerformance(Driver, httpResBody));

            case 10:
                _ref = context$1$0.sent;
                _ref2 = _slicedToArray(_ref, 2);
                memoryInfo = _ref2[0];
                cpuRate = _ref2[1];
                _testwa$genRsp = testwa.genRsp(driver, req, httpStatus, httpResBody, action, param, cpuRate, memoryInfo);
                _testwa$genRsp2 = _slicedToArray(_testwa$genRsp, 2);
                testDataReply = _testwa$genRsp2[0];
                endTime = _testwa$genRsp2[1];
                screenshotPath = args ? args.screenshotPath : "";
                tempPng = screenshotPath + "/" + endTime + ".png";
                context$1$0.next = 22;
                return _regeneratorRuntime.awrap(testwa.getScreenshotAndroid(Driver, tempPng));

            case 22:
                testDataReply.testdata.screenshotPath = endTime + ".png";

                if (args.genTool) {
                    // console.log(testDataReply);
                    logData.error(testDataReply);
                } else {
                    testwaresponse.SendDataNativeApp(testDataReply.testdata);
                }

            case 24:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

testwa.getActionIOS = function callee$0$0(driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var Driver, caps, args, _getTranslationAction3, _getTranslationAction32, action, param, _testwa$genRsp3, _testwa$genRsp32, testDataReply, endTime, screenshotPath, tempPng;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                Driver = driver.sessions[httpResBody.sessionId];
                caps = Driver.caps;
                args = driver.args;

                genTool = args.genTool;

                _getTranslationAction3 = this.getTranslationAction(commond, jsonObj);
                _getTranslationAction32 = _slicedToArray(_getTranslationAction3, 2);
                action = _getTranslationAction32[0];
                param = _getTranslationAction32[1];
                _testwa$genRsp3 = testwa.genRsp(driver, httpStatus, httpResBody, action, param, 0, 0);
                _testwa$genRsp32 = _slicedToArray(_testwa$genRsp3, 2);
                testDataReply = _testwa$genRsp32[0];
                endTime = _testwa$genRsp32[1];
                screenshotPath = args ? args.screenshotPath : "";
                tempPng = screenshotPath + "/" + endTime + ".png";
                context$1$0.next = 16;
                return _regeneratorRuntime.awrap(testwa.getScreenshotIOS(Driver, tempPng));

            case 16:
                testDataReply.testdata.screenshotPath = endTime + ".png";

                if (args.genTool) {
                    // console.log(testDataReply);
                    logData.error(testDataReply);
                } else {
                    testwaresponse.SendDataNativeApp(testDataReply.testdata);
                }

            case 18:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

//get memoryinfo and cpurate
testwa.getPerformance = function callee$0$0(androidDriver, httpResBody) {
    var adb, caps, appName, out, reg_MEM, reg_CPU, memarray, tmpcpurate, memoryinfo, cpurate;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                logger.debug("Getting device memeory and cpu cost!");
                adb = androidDriver.adb;
                caps = androidDriver.caps;
                appName = caps.appPackage;
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(adb.shell("top -n 1 -d 0.5 | grep " + appName));

            case 6:
                out = context$1$0.sent;
                reg_MEM = /[0-9]{1,9}([K])/g;
                reg_CPU = /[0-9]{1,2}([%])/g;
                memarray = out.match(reg_MEM);
                tmpcpurate = out.match(reg_CPU);
                memoryinfo = memarray[1];

                memoryinfo = memoryinfo.replace('K', '');
                cpurate = tmpcpurate[0];

                cpurate = cpurate.replace('%', '');
                return context$1$0.abrupt('return', [memoryinfo, cpurate]);

            case 16:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

testwa.getScreenshotAndroid = function callee$0$0(androidDriver, tempPng) {
    var png, cmd;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                png = '/data/local/tmp/screenshot.png';
                cmd = ['/system/bin/rm', png + ';', '/system/bin/screencap', '-p', png];
                context$1$0.next = 4;
                return _regeneratorRuntime.awrap(androidDriver.adb.shell(cmd));

            case 4:
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(fs.exists(tempPng));

            case 6:
                if (!context$1$0.sent) {
                    context$1$0.next = 9;
                    break;
                }

                context$1$0.next = 9;
                return _regeneratorRuntime.awrap(fs.unlink(tempPng));

            case 9:
                context$1$0.next = 11;
                return _regeneratorRuntime.awrap(androidDriver.adb.pull(png, tempPng));

            case 11:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

testwa.getScreenshotIOS = function callee$0$0(Driver, tempPng) {
    var guid, shotFile, shotFolder, shotPath, takeScreenShot;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        var _this = this;

        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                guid = _uuidJs2['default'].create();
                shotFile = 'screenshot' + guid;
                shotFolder = "/tmp/testwa-instruments/Run 1/" + shotFile + ".png";
                ;
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(fs.exists(shotFolder));

            case 6:
                if (context$1$0.sent) {
                    context$1$0.next = 10;
                    break;
                }

                logger.debug('Creating folder \'' + shotFolder + '\'');
                context$1$0.next = 10;
                return _regeneratorRuntime.awrap(mkdirp(shotFolder));

            case 10:
                shotPath = _path2['default'].resolve(shotFolder, shotFile + '.png');

                logger.debug('Taking screenshot: \'' + shotPath + '\'');

                takeScreenShot = function takeScreenShot() {
                    var screenshotWaitTimeout, startMs, success;
                    return _regeneratorRuntime.async(function takeScreenShot$(context$2$0) {
                        while (1) switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                context$2$0.next = 2;
                                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.capture(\'' + shotFile + '\')'));

                            case 2:
                                screenshotWaitTimeout = (this.opts.screenshotWaitTimeout || 10) * 1000;

                                logger.debug('Waiting ' + screenshotWaitTimeout + ' ms for screenshot to be generated.');
                                startMs = Date.now();
                                success = false;

                            case 6:
                                if (!(Date.now() - startMs < screenshotWaitTimeout)) {
                                    context$2$0.next = 16;
                                    break;
                                }

                                context$2$0.next = 9;
                                return _regeneratorRuntime.awrap(fs.hasAccess(shotPath));

                            case 9:
                                if (!context$2$0.sent) {
                                    context$2$0.next = 12;
                                    break;
                                }

                                success = true;
                                return context$2$0.abrupt('break', 16);

                            case 12:
                                context$2$0.next = 14;
                                return _regeneratorRuntime.awrap(B.delay(300));

                            case 14:
                                context$2$0.next = 6;
                                break;

                            case 16:
                                if (success) {
                                    context$2$0.next = 18;
                                    break;
                                }

                                throw new errors.UnknownError('Timed out waiting for screenshot file');

                            case 18:
                                context$2$0.next = 20;
                                return _regeneratorRuntime.awrap(this.getOrientation());

                            case 20:
                                context$2$0.t0 = context$2$0.sent;

                                if (!(context$2$0.t0 === 'LANDSCAPE')) {
                                    context$2$0.next = 25;
                                    break;
                                }

                                logger.debug('Rotating landscape screenshot');
                                context$2$0.next = 25;
                                return _regeneratorRuntime.awrap(_appiumIosDriverNode_modulesAppiumUiauto.utils.rotateImage(shotPath, -90));

                            case 25:

                                ncp(shotFolder, temp, function (err) {
                                    if (err) {
                                        return logger.error(err);
                                    }
                                    logger.log('screenshot done!');
                                });

                                return context$2$0.abrupt('return');

                            case 27:
                            case 'end':
                                return context$2$0.stop();
                        }
                    }, null, _this);
                };

            case 13:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = testwa;

//Android device

//IOS device

//only difference between ios and android is not getting performance.

// check the rotation, and rotate if necessary
//# sourceMappingURL=data:application/json;base64,