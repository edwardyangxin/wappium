#!/usr/bin/env node

// transpile:testwa

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _appiumLogger = require('appium-logger');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var _appiumIosDriverNode_modulesAppiumUiauto = require('../../../../appium-ios-driver/node_modules/appium-uiauto');

var _asyncbox = require('asyncbox');

// import {JSON5} from 'json5';

var logger = (0, _appiumLogger.getLogger)("TestWa");
var logData = (0, _appiumLogger.getLogger)("TestWaData");

var fs = require('fs'),
    temp = require('temp'),
    _ = require('underscore'),
    testwaresponse = require('./middleware.js'),
    testData = require('./testcasedata.js'),
    async = require('async'),
    stringify = require('json-stringify-safe'),
    ncp = require('ncp').ncp,
    querystring = require("querystring"); //testwa

var testwa = {};
var screenIndex = 0;
var op_alue = "";
var memoryinfo = "0";
var cpurate = "0";
var packagename = "";
var sessionid = "";
var testsuit = "";
var testcaseid = "";
var deviceid = "";
var genTool = false;

testwa.heartbeat = function (args) {
    if (args.waHeartbeat) {
        var returnStatus = { status: 0 };
        //use testwaDeviceId instead of udid for MAC
        if (args.udid) {
            testwaresponse.SendStartStatus(returnStatus, args.udid, args.testcaselogId, args.port);
        } else {
            testwaresponse.SendStartStatus(returnStatus, args.testwaDeviceId, args.testcaselogId, args.port);
        }
    }
};

testwa.responseNoDriver = function (driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var args = driver.args;

    var testDataReply = _.clone(testData);
    testDataReply.testdata.description = "No Driver found for this session, probably appium error, please restart appium!";
    if (args.genTool) {
        // console.log(testDataReply);
        logData.error(stringify(testDataReply));
    } else {
        testwaresponse.SendDataNativeApp(testDataReply.testdata);
    }
};

testwa.responseDeleteSession = function (driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var testDataReply = _.clone(testData);
    testDataReply.testdata.status = 0;
    testDataReply.testdata.value = httpResBody.value;
    testDataReply.testdata.runtime = 0;
    testDataReply.testdata.sessionId = httpResBody.sessionId;
    testDataReply.testdata.deviceId = deviceid;
    testDataReply.testdata.testSuit = testsuit;
    testDataReply.testdata.testcaseId = testcaseid;
    testDataReply.testdata.command = { "action": "停止测试", "params": "" };
    testDataReply.testdata.screenshotPath = "";

    var myDate = new Date();
    var endTime = myDate.getTime();
    testDataReply.runtime = endTime - req._startTime.getTime();
    testDataReply.status = httpResBody.status;
    if (null !== httpResBody.value) {
        testDataReply.description = httpResBody.value.message ? httpResBody.value.message : "";
    }

    if (genTool) {
        // console.log(testDataReply);
        logData.error(stringify(testDataReply));
    } else {
        testwaresponse.SendDataNativeApp(testDataReply.testdata);
    }
};

testwa.handler = function callee$0$0(driver, req, httpStatus, httpResBody, commond, jsonObj) {
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!(commond !== 'deleteSession')) {
                    context$1$0.next = 14;
                    break;
                }

                if (!driver.sessions[httpResBody.sessionId]) {
                    context$1$0.next = 11;
                    break;
                }

                if (!(driver.sessions[httpResBody.sessionId].constructor.name === 'AndroidDriver')) {
                    context$1$0.next = 7;
                    break;
                }

                context$1$0.next = 5;
                return _regeneratorRuntime.awrap(testwa.getActionAndroid(driver, req, httpStatus, httpResBody, commond, jsonObj));

            case 5:
                context$1$0.next = 9;
                break;

            case 7:
                context$1$0.next = 9;
                return _regeneratorRuntime.awrap(testwa.getActionIOS(driver, req, httpStatus, httpResBody, commond, jsonObj));

            case 9:
                context$1$0.next = 12;
                break;

            case 11:
                //no driver found , response error
                testwa.responseNoDriver(driver, req, httpStatus, httpResBody, commond, jsonObj);

            case 12:
                context$1$0.next = 15;
                break;

            case 14:
                //deleteSession
                testwa.responseDeleteSession(driver, req, httpStatus, httpResBody, commond, jsonObj);

            case 15:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

//Android driver
testwa.getTranslationAction = function (commond, jsonObj) {
    if (commond === "createSession") {
        return ["创建会话", ""];
    } else if (commond === "findElements") {
        return ["查找元素（" + jsonObj.using + "）", jsonObj.value];
    } else if (commond === "findElement") {
        return ["查找元素（" + jsonObj.using + "）", jsonObj.value];
    } else if (commond === "click") {
        return ["点击", ""];
    } else if (commond === "setValue") {
        return ["输入", jsonObj.value.join("")];
    } else if (commond === "implicitWait") {
        return ["等待", jsonObj.ms + "ms"];
    } else if (commond === "getWindowSize") {
        return ["获取屏幕大小", ""];
    } else if (commond === "performTouch") {
        if (jsonObj.actions.length === 1) {
            var action = jsonObj.actions[0];
            if (action.action === "longPress") {
                var options = action.options;
                return ["长按", "(x:" + options.x + ",y:" + options.y + ")" + options.duration + "ms"];
            }
        } else if (jsonObj.actions.length === 4) {
            var action1 = jsonObj.actions[0];
            var action3 = jsonObj.actions[2];
            if (action1.action === "press" && action3.action === "moveTo") {
                var options1 = action1.options;
                var options3 = action3.options;
                return ["滑屏", "从(x:" + options1.x + ",y:" + options1.y + ")到(x:" + options3.x + ",y:" + options3.y + ")"];
            }
        }
    }

    return [commond, jsonObj.value];
};
testwa.genRsp = function (driver, req, httpStatus, httpResBody, action, param, cpuRate, memoryInfo) {
    var Driver = driver.sessions[httpResBody.sessionId];
    var caps = Driver.caps;
    var args = driver.args;

    var testDataReply = _.clone(testData);
    testDataReply.testdata.status = httpStatus;
    testDataReply.testdata.value = httpResBody.value;
    testDataReply.testdata.runtime = 0;
    testDataReply.testdata.cpurate = cpuRate ? cpuRate : "0";
    testDataReply.testdata.memory = memoryInfo ? memoryInfo : "0";
    testDataReply.testdata.sessionId = httpResBody.sessionId;
    testDataReply.testdata.deviceId = deviceid = caps ? caps.deviceName : "";
    testDataReply.testdata.testSuit = testsuit = caps ? caps.testSuit : "";
    testDataReply.testdata.testcaseId = testcaseid = caps ? caps.testcaseId : "";
    testDataReply.testdata.command = { "action": action, "params": param };

    var myDate = new Date();
    var endTime = myDate.getTime();
    testDataReply.testdata.runtime = endTime - req._startTime.getTime();
    testDataReply.testdata.status = httpResBody.status;
    if (null !== httpResBody.value) {
        testDataReply.testdata.description = httpResBody.value.message ? httpResBody.value.message : "";
    }

    return [testDataReply, endTime];
};
testwa.outputLogcat = function (Driver) {
    var adb = Driver.adb;
    if (adb && querystring.stringify(adb.logcat) !== null) {
        console.log("[to-server-logcat-start]");
        console.log(adb.logcat.getLogs());
        console.log("[to-server-logcat-end]");
    }
};
testwa.getActionAndroid = function callee$0$0(driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var Driver, caps, args, _getTranslationAction, _getTranslationAction2, action, param, _ref, _ref2, memoryInfo, cpuRate, _testwa$genRsp, _testwa$genRsp2, testDataReply, endTime, screenshotPath, tempPng;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                Driver = driver.sessions[httpResBody.sessionId];
                caps = Driver.caps;
                args = driver.args;

                genTool = args.genTool;
                // let action = commond;
                // let param = jsonObj.value ? jsonObj.value:jsonObj.ms;

                _getTranslationAction = this.getTranslationAction(commond, jsonObj);
                _getTranslationAction2 = _slicedToArray(_getTranslationAction, 2);
                action = _getTranslationAction2[0];
                param = _getTranslationAction2[1];
                context$1$0.next = 10;
                return _regeneratorRuntime.awrap(this.getPerformance(Driver, httpResBody));

            case 10:
                _ref = context$1$0.sent;
                _ref2 = _slicedToArray(_ref, 2);
                memoryInfo = _ref2[0];
                cpuRate = _ref2[1];
                _testwa$genRsp = testwa.genRsp(driver, req, httpStatus, httpResBody, action, param, cpuRate, memoryInfo);
                _testwa$genRsp2 = _slicedToArray(_testwa$genRsp, 2);
                testDataReply = _testwa$genRsp2[0];
                endTime = _testwa$genRsp2[1];
                screenshotPath = args ? args.screenshotPath : "";
                tempPng = screenshotPath + "/" + endTime + ".png";
                context$1$0.next = 22;
                return _regeneratorRuntime.awrap(testwa.getScreenshotAndroid(Driver, tempPng));

            case 22:
                testDataReply.testdata.screenshotPath = endTime + ".png";

                if (args.genTool) {
                    // console.log(testDataReply);
                    logData.error(stringify(testDataReply));
                } else {
                    testwa.outputLogcat(Driver);
                    testwaresponse.SendDataNativeApp(testDataReply.testdata);
                }

            case 24:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

testwa.getActionIOS = function callee$0$0(driver, req, httpStatus, httpResBody, commond, jsonObj) {
    var Driver, caps, args, _getTranslationAction3, _getTranslationAction32, action, param, _testwa$genRsp3, _testwa$genRsp32, testDataReply, endTime, screenshotPath, tempPng;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                Driver = driver.sessions[httpResBody.sessionId];
                caps = Driver.caps;
                args = driver.args;

                genTool = args.genTool;

                _getTranslationAction3 = this.getTranslationAction(commond, jsonObj);
                _getTranslationAction32 = _slicedToArray(_getTranslationAction3, 2);
                action = _getTranslationAction32[0];
                param = _getTranslationAction32[1];
                _testwa$genRsp3 = testwa.genRsp(driver, httpStatus, httpResBody, action, param, 0, 0);
                _testwa$genRsp32 = _slicedToArray(_testwa$genRsp3, 2);
                testDataReply = _testwa$genRsp32[0];
                endTime = _testwa$genRsp32[1];
                screenshotPath = args ? args.screenshotPath : "";
                tempPng = screenshotPath + "/" + endTime + ".png";
                context$1$0.next = 16;
                return _regeneratorRuntime.awrap(testwa.getScreenshotIOS(Driver, tempPng));

            case 16:
                testDataReply.testdata.screenshotPath = endTime + ".png";

                if (args.genTool) {
                    // console.log(testDataReply);
                    logData.error(stringify(testDataReply));
                } else {
                    testwaresponse.SendDataNativeApp(testDataReply.testdata);
                }

            case 18:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

//get memoryinfo and cpurate
testwa.getPerformance = function callee$0$0(androidDriver, httpResBody) {
    var adb, caps, appName, out, reg_MEM, reg_CPU, memarray, tmpcpurate, memoryinfo, cpurate;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                logger.debug("Getting device memeory and cpu cost!");
                adb = androidDriver.adb;
                caps = androidDriver.caps;
                appName = caps.appPackage;
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(adb.shell("top -n 1 -d 0.5 | grep " + appName));

            case 6:
                out = context$1$0.sent;
                reg_MEM = /[0-9]{1,9}([K])/g;
                reg_CPU = /[0-9]{1,2}([%])/g;
                memarray = out.match(reg_MEM);
                tmpcpurate = out.match(reg_CPU);
                memoryinfo = memarray[1];

                memoryinfo = memoryinfo.replace('K', '');
                cpurate = tmpcpurate[0];

                cpurate = cpurate.replace('%', '');
                return context$1$0.abrupt('return', [memoryinfo, cpurate]);

            case 16:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

testwa.getScreenshotAndroid = function callee$0$0(androidDriver, tempPng) {
    var png, cmd;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                png = '/data/local/tmp/screenshot.png';
                cmd = ['/system/bin/rm', png + ';', '/system/bin/screencap', '-p', png];
                context$1$0.next = 4;
                return _regeneratorRuntime.awrap(androidDriver.adb.shell(cmd));

            case 4:
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(fs.exists(tempPng));

            case 6:
                if (!context$1$0.sent) {
                    context$1$0.next = 9;
                    break;
                }

                context$1$0.next = 9;
                return _regeneratorRuntime.awrap(fs.unlink(tempPng));

            case 9:
                context$1$0.next = 11;
                return _regeneratorRuntime.awrap(androidDriver.adb.pull(png, tempPng));

            case 11:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

testwa.getScreenshotIOS = function callee$0$0(Driver, tempPng) {
    var guid, shotFile, shotFolder, shotPath, takeScreenShot;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        var _this = this;

        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                guid = _uuidJs2['default'].create();
                shotFile = 'screenshot' + guid;
                shotFolder = "/tmp/testwa-instruments/Run 1/" + shotFile + ".png";
                ;
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(fs.exists(shotFolder));

            case 6:
                if (context$1$0.sent) {
                    context$1$0.next = 10;
                    break;
                }

                logger.debug('Creating folder \'' + shotFolder + '\'');
                context$1$0.next = 10;
                return _regeneratorRuntime.awrap(mkdirp(shotFolder));

            case 10:
                shotPath = _path2['default'].resolve(shotFolder, shotFile + '.png');

                logger.debug('Taking screenshot: \'' + shotPath + '\'');

                takeScreenShot = function takeScreenShot() {
                    var screenshotWaitTimeout, startMs, success;
                    return _regeneratorRuntime.async(function takeScreenShot$(context$2$0) {
                        while (1) switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                context$2$0.next = 2;
                                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.capture(\'' + shotFile + '\')'));

                            case 2:
                                screenshotWaitTimeout = (this.opts.screenshotWaitTimeout || 10) * 1000;

                                logger.debug('Waiting ' + screenshotWaitTimeout + ' ms for screenshot to be generated.');
                                startMs = Date.now();
                                success = false;

                            case 6:
                                if (!(Date.now() - startMs < screenshotWaitTimeout)) {
                                    context$2$0.next = 16;
                                    break;
                                }

                                context$2$0.next = 9;
                                return _regeneratorRuntime.awrap(fs.hasAccess(shotPath));

                            case 9:
                                if (!context$2$0.sent) {
                                    context$2$0.next = 12;
                                    break;
                                }

                                success = true;
                                return context$2$0.abrupt('break', 16);

                            case 12:
                                context$2$0.next = 14;
                                return _regeneratorRuntime.awrap(B.delay(300));

                            case 14:
                                context$2$0.next = 6;
                                break;

                            case 16:
                                if (success) {
                                    context$2$0.next = 18;
                                    break;
                                }

                                throw new errors.UnknownError('Timed out waiting for screenshot file');

                            case 18:
                                context$2$0.next = 20;
                                return _regeneratorRuntime.awrap(this.getOrientation());

                            case 20:
                                context$2$0.t0 = context$2$0.sent;

                                if (!(context$2$0.t0 === 'LANDSCAPE')) {
                                    context$2$0.next = 25;
                                    break;
                                }

                                logger.debug('Rotating landscape screenshot');
                                context$2$0.next = 25;
                                return _regeneratorRuntime.awrap(_appiumIosDriverNode_modulesAppiumUiauto.utils.rotateImage(shotPath, -90));

                            case 25:

                                ncp(shotFolder, temp, function (err) {
                                    if (err) {
                                        return logger.error(err);
                                    }
                                    logger.log('screenshot done!');
                                });

                                return context$2$0.abrupt('return');

                            case 27:
                            case 'end':
                                return context$2$0.stop();
                        }
                    }, null, _this);
                };

            case 13:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = testwa;

//Android device

//IOS device

//only difference between ios and android is not getting performance.

// check the rotation, and rotate if necessary
//# sourceMappingURL=data:application/json;base64,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QUFPLEdBQUcsS0FBSzs7O3NDQUNaLEFBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sR0FBSSxxQkFBcUIsQ0FBQTs7Ozs7O2lFQUN2QyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7QUFDNUIsdUNBQU8sR0FBRyxJQUFJLENBQUM7Ozs7O2lFQUdiLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzs7Ozs7O29DQUVqQixPQUFPOzs7OztzQ0FDRixJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsdUNBQXVDLENBQUM7Ozs7aUVBSWhFLElBQUksQ0FBQyxjQUFjLEVBQUU7Ozs7O3lEQUFLLFdBQVc7Ozs7O0FBQzNDLHNDQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7O2lFQUN4QywrQ0FBTSxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDOzs7O0FBRzFDLG1DQUFHLENBQUMsVUFBVSxFQUFDLElBQUksRUFBQyxVQUFVLEdBQUcsRUFBRTtBQUMvQix3Q0FBSSxHQUFHLEVBQUU7QUFDTCwrQ0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FDQUM1QjtBQUNELDBDQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7aUNBQUMsQ0FBQyxDQUFDOzs7Ozs7Ozs7aUJBR3pDOzs7Ozs7O0NBQ0osQ0FBQTs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyIsImZpbGUiOiJsaWJcXHRlc3R3YVxcdGVzdHdhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8vIHRyYW5zcGlsZTp0ZXN0d2FcclxuXHJcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ2FwcGl1bS1sb2dnZXInO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHV1aWQgZnJvbSAndXVpZC1qcyc7XHJcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vYXBwaXVtLWlvcy1kcml2ZXIvbm9kZV9tb2R1bGVzL2FwcGl1bS11aWF1dG8nO1xyXG5pbXBvcnQgeyByZXRyeSB9IGZyb20gJ2FzeW5jYm94JztcclxuLy8gaW1wb3J0IHtKU09ONX0gZnJvbSAnanNvbjUnO1xyXG5cclxubGV0IGxvZ2dlciA9IGdldExvZ2dlcihcIlRlc3RXYVwiKTtcclxubGV0IGxvZ0RhdGEgPSBnZXRMb2dnZXIoXCJUZXN0V2FEYXRhXCIpO1xyXG5cclxubGV0ICBmcyA9IHJlcXVpcmUoJ2ZzJylcclxuICAgICwgdGVtcCA9IHJlcXVpcmUoJ3RlbXAnKVxyXG4gICAgLCBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpXHJcbiAgICAsdGVzdHdhcmVzcG9uc2UgPSByZXF1aXJlKCcuL21pZGRsZXdhcmUuanMnKVxyXG4gICAgLHRlc3REYXRhID0gcmVxdWlyZSgnLi90ZXN0Y2FzZWRhdGEuanMnKVxyXG4gICAgLGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKVxyXG4gICAgLHN0cmluZ2lmeSA9IHJlcXVpcmUoJ2pzb24tc3RyaW5naWZ5LXNhZmUnKVxyXG4gICAgLG5jcCA9IHJlcXVpcmUoJ25jcCcpLm5jcFxyXG4gICAgLHF1ZXJ5c3RyaW5nID0gcmVxdWlyZShcInF1ZXJ5c3RyaW5nXCIpOy8vdGVzdHdhXHJcblxyXG5sZXQgdGVzdHdhID0ge307XHJcbmxldCBzY3JlZW5JbmRleD0wO1xyXG5sZXQgb3BfYWx1ZSA9IFwiXCI7XHJcbmxldCBtZW1vcnlpbmZvID0gXCIwXCI7XHJcbmxldCBjcHVyYXRlID0gXCIwXCI7XHJcbmxldCBwYWNrYWdlbmFtZSA9IFwiXCI7XHJcbmxldCBzZXNzaW9uaWQgPSBcIlwiO1xyXG5sZXQgdGVzdHN1aXQgPSBcIlwiO1xyXG5sZXQgdGVzdGNhc2VpZCA9IFwiXCI7XHJcbmxldCBkZXZpY2VpZCA9IFwiXCI7XHJcbmxldCBnZW5Ub29sID0gZmFsc2U7XHJcblxyXG50ZXN0d2EuaGVhcnRiZWF0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgIGlmIChhcmdzLndhSGVhcnRiZWF0KSB7XHJcbiAgICAgICAgdmFyIHJldHVyblN0YXR1cyA9IHtzdGF0dXM6IDB9O1xyXG4gICAgICAgIC8vdXNlIHRlc3R3YURldmljZUlkIGluc3RlYWQgb2YgdWRpZCBmb3IgTUFDXHJcbiAgICAgICAgaWYgKGFyZ3MudWRpZCkge1xyXG4gICAgICAgICAgICB0ZXN0d2FyZXNwb25zZS5TZW5kU3RhcnRTdGF0dXMocmV0dXJuU3RhdHVzLCBhcmdzLnVkaWQsIGFyZ3MudGVzdGNhc2Vsb2dJZCwgYXJncy5wb3J0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRlc3R3YXJlc3BvbnNlLlNlbmRTdGFydFN0YXR1cyhyZXR1cm5TdGF0dXMsIGFyZ3MudGVzdHdhRGV2aWNlSWQsIGFyZ3MudGVzdGNhc2Vsb2dJZCwgYXJncy5wb3J0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbnRlc3R3YS5yZXNwb25zZU5vRHJpdmVyID0gZnVuY3Rpb24gKGRyaXZlciwgcmVxLCBodHRwU3RhdHVzLCBodHRwUmVzQm9keSwgY29tbW9uZCwganNvbk9iaikge1xyXG4gICAgbGV0IGFyZ3MgPSBkcml2ZXIuYXJncztcclxuXHJcbiAgICBsZXQgdGVzdERhdGFSZXBseSA9IF8uY2xvbmUodGVzdERhdGEpO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5kZXNjcmlwdGlvbiA9IFwiTm8gRHJpdmVyIGZvdW5kIGZvciB0aGlzIHNlc3Npb24sIHByb2JhYmx5IGFwcGl1bSBlcnJvciwgcGxlYXNlIHJlc3RhcnQgYXBwaXVtIVwiO1xyXG4gICAgaWYgKGFyZ3MuZ2VuVG9vbCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRlc3REYXRhUmVwbHkpO1xyXG4gICAgICAgIGxvZ0RhdGEuZXJyb3Ioc3RyaW5naWZ5KHRlc3REYXRhUmVwbHkpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGVzdHdhcmVzcG9uc2UuU2VuZERhdGFOYXRpdmVBcHAodGVzdERhdGFSZXBseS50ZXN0ZGF0YSlcclxuICAgIH1cclxufVxyXG5cclxudGVzdHdhLnJlc3BvbnNlRGVsZXRlU2Vzc2lvbiA9IGZ1bmN0aW9uIChkcml2ZXIsIHJlcSwgaHR0cFN0YXR1cywgaHR0cFJlc0JvZHksIGNvbW1vbmQsIGpzb25PYmopIHtcclxuICAgIGxldCB0ZXN0RGF0YVJlcGx5ID0gXy5jbG9uZSh0ZXN0RGF0YSk7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnN0YXR1cyA9IDA7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnZhbHVlID0gaHR0cFJlc0JvZHkudmFsdWU7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnJ1bnRpbWUgPSAwO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5zZXNzaW9uSWQgPSBodHRwUmVzQm9keS5zZXNzaW9uSWQ7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLmRldmljZUlkID0gZGV2aWNlaWQ7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnRlc3RTdWl0ID0gdGVzdHN1aXQ7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnRlc3RjYXNlSWQgPSB0ZXN0Y2FzZWlkO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5jb21tYW5kID0ge1wiYWN0aW9uXCI6IFwi5YGc5q2i5rWL6K+VXCIsIFwicGFyYW1zXCI6IFwiXCJ9O1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5zY3JlZW5zaG90UGF0aCA9IFwiXCI7XHJcblxyXG4gICAgbGV0IG15RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBsZXQgZW5kVGltZSA9IG15RGF0ZS5nZXRUaW1lKCk7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnJ1bnRpbWUgPSBlbmRUaW1lIC0gcmVxLl9zdGFydFRpbWUuZ2V0VGltZSgpO1xyXG4gICAgdGVzdERhdGFSZXBseS5zdGF0dXMgPSBodHRwUmVzQm9keS5zdGF0dXM7XHJcbiAgICBpZiAobnVsbCAhPT0gaHR0cFJlc0JvZHkudmFsdWUpIHtcclxuICAgICAgICB0ZXN0RGF0YVJlcGx5LmRlc2NyaXB0aW9uID0gaHR0cFJlc0JvZHkudmFsdWUubWVzc2FnZSA/IGh0dHBSZXNCb2R5LnZhbHVlLm1lc3NhZ2UgOiBcIlwiO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAoZ2VuVG9vbCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRlc3REYXRhUmVwbHkpO1xyXG4gICAgICAgIGxvZ0RhdGEuZXJyb3Ioc3RyaW5naWZ5KHRlc3REYXRhUmVwbHkpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGVzdHdhcmVzcG9uc2UuU2VuZERhdGFOYXRpdmVBcHAodGVzdERhdGFSZXBseS50ZXN0ZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbnRlc3R3YS5oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24gKGRyaXZlcixyZXEsaHR0cFN0YXR1cyxodHRwUmVzQm9keSxjb21tb25kLGpzb25PYmopIHtcclxuICAgIGlmIChjb21tb25kICE9PSAnZGVsZXRlU2Vzc2lvbicpIHtcclxuICAgICAgICBpZiAoZHJpdmVyLnNlc3Npb25zW2h0dHBSZXNCb2R5LnNlc3Npb25JZF0pIHtcclxuICAgICAgICAgICAgaWYgKGRyaXZlci5zZXNzaW9uc1todHRwUmVzQm9keS5zZXNzaW9uSWRdLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdBbmRyb2lkRHJpdmVyJykge1xyXG4gICAgICAgICAgICAgICAgLy9BbmRyb2lkIGRldmljZVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdHdhLmdldEFjdGlvbkFuZHJvaWQoZHJpdmVyLCByZXEsIGh0dHBTdGF0dXMsIGh0dHBSZXNCb2R5LCBjb21tb25kLCBqc29uT2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vSU9TIGRldmljZVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdHdhLmdldEFjdGlvbklPUyhkcml2ZXIsIHJlcSwgaHR0cFN0YXR1cywgaHR0cFJlc0JvZHksIGNvbW1vbmQsIGpzb25PYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9ubyBkcml2ZXIgZm91bmQgLCByZXNwb25zZSBlcnJvclxyXG4gICAgICAgICAgICB0ZXN0d2EucmVzcG9uc2VOb0RyaXZlcihkcml2ZXIsIHJlcSwgaHR0cFN0YXR1cywgaHR0cFJlc0JvZHksIGNvbW1vbmQsIGpzb25PYmopO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9kZWxldGVTZXNzaW9uXHJcbiAgICAgICAgdGVzdHdhLnJlc3BvbnNlRGVsZXRlU2Vzc2lvbihkcml2ZXIscmVxLGh0dHBTdGF0dXMsaHR0cFJlc0JvZHksY29tbW9uZCxqc29uT2JqKTtcclxuICAgIH1cclxufVxyXG5cclxuLy9BbmRyb2lkIGRyaXZlclxyXG50ZXN0d2EuZ2V0VHJhbnNsYXRpb25BY3Rpb24gPSBmdW5jdGlvbiAoY29tbW9uZCwganNvbk9iaikge1xyXG4gICAgaWYgKGNvbW1vbmQgPT09IFwiY3JlYXRlU2Vzc2lvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcIuWIm+W7uuS8muivnVwiLFwiXCJdO1xyXG4gICAgfSBlbHNlIGlmIChjb21tb25kID09PSBcImZpbmRFbGVtZW50c1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcIuafpeaJvuWFg+e0oO+8iFwiK2pzb25PYmoudXNpbmcrXCLvvIlcIixqc29uT2JqLnZhbHVlXTtcclxuICAgIH0gZWxzZSBpZihjb21tb25kID09PSBcImZpbmRFbGVtZW50XCIpIHtcclxuICAgICAgICByZXR1cm4gW1wi5p+l5om+5YWD57Sg77yIXCIranNvbk9iai51c2luZytcIu+8iVwiLGpzb25PYmoudmFsdWVdO1xyXG4gICAgfSBlbHNlIGlmIChjb21tb25kID09PSBcImNsaWNrXCIpIHtcclxuICAgICAgICByZXR1cm4gW1wi54K55Ye7XCIsXCJcIl07XHJcbiAgICB9IGVsc2UgaWYgKGNvbW1vbmQgPT09IFwic2V0VmFsdWVcIikge1xyXG4gICAgICAgIHJldHVybiBbXCLovpPlhaVcIixqc29uT2JqLnZhbHVlLmpvaW4oXCJcIildO1xyXG4gICAgfSBlbHNlIGlmIChjb21tb25kID09PSBcImltcGxpY2l0V2FpdFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcIuetieW+hVwiLGpzb25PYmoubXMrXCJtc1wiXTtcclxuICAgIH0gZWxzZSBpZiAoY29tbW9uZCA9PT0gXCJnZXRXaW5kb3dTaXplXCIpIHtcclxuICAgICAgICByZXR1cm4gW1wi6I635Y+W5bGP5bmV5aSn5bCPXCIsXCJcIl07XHJcbiAgICB9IGVsc2UgaWYgKGNvbW1vbmQgPT09IFwicGVyZm9ybVRvdWNoXCIpIHtcclxuICAgICAgICBpZiAoanNvbk9iai5hY3Rpb25zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBsZXQgYWN0aW9uID0ganNvbk9iai5hY3Rpb25zWzBdO1xyXG4gICAgICAgICAgICBpZiAoYWN0aW9uLmFjdGlvbiA9PT0gXCJsb25nUHJlc3NcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBhY3Rpb24ub3B0aW9ucztcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXCLplb/mjIlcIixcIih4OlwiK29wdGlvbnMueCtcIix5OlwiK29wdGlvbnMueStcIilcIitvcHRpb25zLmR1cmF0aW9uK1wibXNcIl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGpzb25PYmouYWN0aW9ucy5sZW5ndGggPT09IDQpIHtcclxuICAgICAgICAgICAgbGV0IGFjdGlvbjEgPSBqc29uT2JqLmFjdGlvbnNbMF07XHJcbiAgICAgICAgICAgIGxldCBhY3Rpb24zID0ganNvbk9iai5hY3Rpb25zWzJdO1xyXG4gICAgICAgICAgICBpZiAoYWN0aW9uMS5hY3Rpb24gPT09IFwicHJlc3NcIiAmJiBhY3Rpb24zLmFjdGlvbiA9PT0gXCJtb3ZlVG9cIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMxID0gYWN0aW9uMS5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMzID0gYWN0aW9uMy5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcIua7keWxj1wiLFwi5LuOKHg6XCIrb3B0aW9uczEueCtcIix5OlwiK29wdGlvbnMxLnkrXCIp5YiwKHg6XCIrb3B0aW9uczMueCtcIix5OlwiK29wdGlvbnMzLnkrXCIpXCJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbY29tbW9uZCxqc29uT2JqLnZhbHVlXTtcclxufVxyXG50ZXN0d2EuZ2VuUnNwID0gZnVuY3Rpb24gKGRyaXZlciwgcmVxLCBodHRwU3RhdHVzLCBodHRwUmVzQm9keSxhY3Rpb24scGFyYW0sY3B1UmF0ZSxtZW1vcnlJbmZvKSB7XHJcbiAgICBsZXQgRHJpdmVyID0gZHJpdmVyLnNlc3Npb25zW2h0dHBSZXNCb2R5LnNlc3Npb25JZF07XHJcbiAgICBsZXQgY2FwcyA9IERyaXZlci5jYXBzO1xyXG4gICAgbGV0IGFyZ3MgPSBkcml2ZXIuYXJncztcclxuXHJcbiAgICBsZXQgdGVzdERhdGFSZXBseSA9IF8uY2xvbmUodGVzdERhdGEpO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5zdGF0dXMgPSBodHRwU3RhdHVzO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS52YWx1ZSA9IGh0dHBSZXNCb2R5LnZhbHVlO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5ydW50aW1lID0gMDtcclxuICAgIHRlc3REYXRhUmVwbHkudGVzdGRhdGEuY3B1cmF0ZSA9IGNwdVJhdGUgPyBjcHVSYXRlOlwiMFwiO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5tZW1vcnkgPSBtZW1vcnlJbmZvID8gbWVtb3J5SW5mbzpcIjBcIjtcclxuICAgIHRlc3REYXRhUmVwbHkudGVzdGRhdGEuc2Vzc2lvbklkID0gaHR0cFJlc0JvZHkuc2Vzc2lvbklkO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5kZXZpY2VJZCA9IGRldmljZWlkID0gY2FwcyA/IGNhcHMuZGV2aWNlTmFtZSA6IFwiXCI7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnRlc3RTdWl0ID0gdGVzdHN1aXQgPSBjYXBzID8gY2Fwcy50ZXN0U3VpdCA6IFwiXCI7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnRlc3RjYXNlSWQgPSB0ZXN0Y2FzZWlkID0gY2FwcyA/IGNhcHMudGVzdGNhc2VJZCA6IFwiXCI7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLmNvbW1hbmQgPSB7XCJhY3Rpb25cIjogYWN0aW9uLCBcInBhcmFtc1wiOiBwYXJhbX07XHJcblxyXG4gICAgbGV0IG15RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBsZXQgZW5kVGltZSA9IG15RGF0ZS5nZXRUaW1lKCk7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnJ1bnRpbWUgPSBlbmRUaW1lIC0gcmVxLl9zdGFydFRpbWUuZ2V0VGltZSgpO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5zdGF0dXMgPSBodHRwUmVzQm9keS5zdGF0dXM7XHJcbiAgICBpZiAobnVsbCAhPT0gaHR0cFJlc0JvZHkudmFsdWUpIHtcclxuICAgICAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLmRlc2NyaXB0aW9uID0gaHR0cFJlc0JvZHkudmFsdWUubWVzc2FnZSA/IGh0dHBSZXNCb2R5LnZhbHVlLm1lc3NhZ2UgOiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbdGVzdERhdGFSZXBseSxlbmRUaW1lXTtcclxufVxyXG50ZXN0d2Eub3V0cHV0TG9nY2F0ID0gZnVuY3Rpb24gKERyaXZlcikge1xyXG4gICAgbGV0IGFkYiA9IERyaXZlci5hZGI7XHJcbiAgICBpZihhZGIgJiYgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KGFkYi5sb2djYXQpICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJbdG8tc2VydmVyLWxvZ2NhdC1zdGFydF1cIik7XHJcbiAgICAgICAgY29uc29sZS5sb2coYWRiLmxvZ2NhdC5nZXRMb2dzKCkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW3RvLXNlcnZlci1sb2djYXQtZW5kXVwiKTtcclxuICAgIH1cclxufVxyXG50ZXN0d2EuZ2V0QWN0aW9uQW5kcm9pZCA9IGFzeW5jIGZ1bmN0aW9uKGRyaXZlcixyZXEsaHR0cFN0YXR1cyxodHRwUmVzQm9keSxjb21tb25kLGpzb25PYmope1xyXG4gICAgbGV0IERyaXZlciA9IGRyaXZlci5zZXNzaW9uc1todHRwUmVzQm9keS5zZXNzaW9uSWRdO1xyXG4gICAgbGV0IGNhcHMgPSBEcml2ZXIuY2FwcztcclxuICAgIGxldCBhcmdzID0gZHJpdmVyLmFyZ3M7XHJcbiAgICBnZW5Ub29sID0gYXJncy5nZW5Ub29sO1xyXG4gICAgLy8gbGV0IGFjdGlvbiA9IGNvbW1vbmQ7XHJcbiAgICAvLyBsZXQgcGFyYW0gPSBqc29uT2JqLnZhbHVlID8ganNvbk9iai52YWx1ZTpqc29uT2JqLm1zO1xyXG5cclxuICAgIGxldCBbYWN0aW9uLHBhcmFtXSA9IHRoaXMuZ2V0VHJhbnNsYXRpb25BY3Rpb24oY29tbW9uZCxqc29uT2JqKTtcclxuXHJcbiAgICBsZXQgW21lbW9yeUluZm8sY3B1UmF0ZV0gPSBhd2FpdCB0aGlzLmdldFBlcmZvcm1hbmNlKERyaXZlcixodHRwUmVzQm9keSk7XHJcblxyXG4gICAgbGV0IFt0ZXN0RGF0YVJlcGx5LGVuZFRpbWVdID0gdGVzdHdhLmdlblJzcChkcml2ZXIscmVxLGh0dHBTdGF0dXMsaHR0cFJlc0JvZHksYWN0aW9uLHBhcmFtLGNwdVJhdGUsbWVtb3J5SW5mbyk7XHJcblxyXG4gICAgbGV0IHNjcmVlbnNob3RQYXRoID0gYXJncyA/IGFyZ3Muc2NyZWVuc2hvdFBhdGggOlwiXCI7XHJcbiAgICBsZXQgdGVtcFBuZyA9IHNjcmVlbnNob3RQYXRoK1wiL1wiK2VuZFRpbWUrXCIucG5nXCI7XHJcbiAgICBhd2FpdCB0ZXN0d2EuZ2V0U2NyZWVuc2hvdEFuZHJvaWQoRHJpdmVyLHRlbXBQbmcpO1xyXG4gICAgdGVzdERhdGFSZXBseS50ZXN0ZGF0YS5zY3JlZW5zaG90UGF0aCA9IGVuZFRpbWUrXCIucG5nXCI7XHJcblxyXG4gICAgaWYgKGFyZ3MuZ2VuVG9vbCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRlc3REYXRhUmVwbHkpO1xyXG4gICAgICAgIGxvZ0RhdGEuZXJyb3Ioc3RyaW5naWZ5KHRlc3REYXRhUmVwbHkpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGVzdHdhLm91dHB1dExvZ2NhdChEcml2ZXIpO1xyXG4gICAgICAgIHRlc3R3YXJlc3BvbnNlLlNlbmREYXRhTmF0aXZlQXBwKHRlc3REYXRhUmVwbHkudGVzdGRhdGEpO1xyXG4gICAgfVxyXG59O1xyXG5cclxudGVzdHdhLmdldEFjdGlvbklPUyA9IGFzeW5jIGZ1bmN0aW9uIChkcml2ZXIsIHJlcSwgaHR0cFN0YXR1cywgaHR0cFJlc0JvZHksIGNvbW1vbmQsIGpzb25PYmopIHtcclxuICAgIC8vb25seSBkaWZmZXJlbmNlIGJldHdlZW4gaW9zIGFuZCBhbmRyb2lkIGlzIG5vdCBnZXR0aW5nIHBlcmZvcm1hbmNlLlxyXG4gICAgbGV0IERyaXZlciA9IGRyaXZlci5zZXNzaW9uc1todHRwUmVzQm9keS5zZXNzaW9uSWRdO1xyXG4gICAgbGV0IGNhcHMgPSBEcml2ZXIuY2FwcztcclxuICAgIGxldCBhcmdzID0gZHJpdmVyLmFyZ3M7XHJcbiAgICBnZW5Ub29sID0gYXJncy5nZW5Ub29sO1xyXG5cclxuICAgIGxldCBbYWN0aW9uLHBhcmFtXSA9IHRoaXMuZ2V0VHJhbnNsYXRpb25BY3Rpb24oY29tbW9uZCxqc29uT2JqKTtcclxuXHJcbiAgICBsZXQgW3Rlc3REYXRhUmVwbHksZW5kVGltZV0gPSB0ZXN0d2EuZ2VuUnNwKGRyaXZlcixodHRwU3RhdHVzLGh0dHBSZXNCb2R5LGFjdGlvbixwYXJhbSwwLDApO1xyXG5cclxuICAgIGxldCBzY3JlZW5zaG90UGF0aCA9IGFyZ3MgPyBhcmdzLnNjcmVlbnNob3RQYXRoOlwiXCI7XHJcbiAgICBsZXQgdGVtcFBuZyA9IHNjcmVlbnNob3RQYXRoK1wiL1wiK2VuZFRpbWUrXCIucG5nXCI7XHJcbiAgICBhd2FpdCB0ZXN0d2EuZ2V0U2NyZWVuc2hvdElPUyhEcml2ZXIsdGVtcFBuZyk7XHJcbiAgICB0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhLnNjcmVlbnNob3RQYXRoID0gZW5kVGltZStcIi5wbmdcIjtcclxuXHJcbiAgICBpZiAoYXJncy5nZW5Ub29sKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGVzdERhdGFSZXBseSk7XHJcbiAgICAgICAgbG9nRGF0YS5lcnJvcihzdHJpbmdpZnkodGVzdERhdGFSZXBseSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0ZXN0d2FyZXNwb25zZS5TZW5kRGF0YU5hdGl2ZUFwcCh0ZXN0RGF0YVJlcGx5LnRlc3RkYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuLy9nZXQgbWVtb3J5aW5mbyBhbmQgY3B1cmF0ZVxyXG50ZXN0d2EuZ2V0UGVyZm9ybWFuY2UgPSBhc3luYyBmdW5jdGlvbiAoYW5kcm9pZERyaXZlcixodHRwUmVzQm9keSkge1xyXG4gICAgbG9nZ2VyLmRlYnVnKFwiR2V0dGluZyBkZXZpY2UgbWVtZW9yeSBhbmQgY3B1IGNvc3QhXCIpO1xyXG4gICAgbGV0IGFkYiA9IGFuZHJvaWREcml2ZXIuYWRiO1xyXG4gICAgbGV0IGNhcHMgPSBhbmRyb2lkRHJpdmVyLmNhcHM7XHJcbiAgICBsZXQgYXBwTmFtZSA9IGNhcHMuYXBwUGFja2FnZTtcclxuICAgIGxldCBvdXQgPSBhd2FpdCBhZGIuc2hlbGwoXCJ0b3AgLW4gMSAtZCAwLjUgfCBncmVwIFwiK2FwcE5hbWUpO1xyXG4gICAgbGV0IHJlZ19NRU0gPSAvWzAtOV17MSw5fShbS10pL2c7XHJcbiAgICBsZXQgcmVnX0NQVSA9IC9bMC05XXsxLDJ9KFslXSkvZztcclxuICAgIGxldCBtZW1hcnJheSAgPSBvdXQubWF0Y2gocmVnX01FTSk7XHJcbiAgICBsZXQgdG1wY3B1cmF0ZSAgPSBvdXQubWF0Y2gocmVnX0NQVSk7XHJcbiAgICBsZXQgbWVtb3J5aW5mbyA9IG1lbWFycmF5WzFdO1xyXG4gICAgbWVtb3J5aW5mbyA9IG1lbW9yeWluZm8ucmVwbGFjZSgnSycsJycpO1xyXG4gICAgbGV0IGNwdXJhdGUgPSB0bXBjcHVyYXRlWzBdO1xyXG4gICAgY3B1cmF0ZSA9IGNwdXJhdGUucmVwbGFjZSgnJScsJycpO1xyXG4gICAgcmV0dXJuIFttZW1vcnlpbmZvLGNwdXJhdGVdO1xyXG59O1xyXG5cclxudGVzdHdhLmdldFNjcmVlbnNob3RBbmRyb2lkID0gYXN5bmMgZnVuY3Rpb24gKGFuZHJvaWREcml2ZXIsIHRlbXBQbmcpIHtcclxuICAgIGNvbnN0IHBuZyA9ICcvZGF0YS9sb2NhbC90bXAvc2NyZWVuc2hvdC5wbmcnO1xyXG4gICAgbGV0IGNtZCA9ICBbJy9zeXN0ZW0vYmluL3JtJywgYCR7cG5nfTtgLCAnL3N5c3RlbS9iaW4vc2NyZWVuY2FwJywgJy1wJywgcG5nXTtcclxuICAgIGF3YWl0IGFuZHJvaWREcml2ZXIuYWRiLnNoZWxsKGNtZCk7XHJcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHRlbXBQbmcpKSB7XHJcbiAgICAgICAgYXdhaXQgZnMudW5saW5rKHRlbXBQbmcpO1xyXG4gICAgfVxyXG4gICAgYXdhaXQgYW5kcm9pZERyaXZlci5hZGIucHVsbChwbmcsIHRlbXBQbmcpO1xyXG59XHJcblxyXG50ZXN0d2EuZ2V0U2NyZWVuc2hvdElPUyA9IGFzeW5jIGZ1bmN0aW9uIChEcml2ZXIsIHRlbXBQbmcpIHtcclxuICAgIGxldCBndWlkID0gdXVpZC5jcmVhdGUoKTtcclxuICAgIGxldCBzaG90RmlsZSA9IGBzY3JlZW5zaG90JHtndWlkfWA7XHJcblxyXG4gICAgbGV0IHNob3RGb2xkZXIgPSBcIi90bXAvdGVzdHdhLWluc3RydW1lbnRzL1J1biAxL1wiK3Nob3RGaWxlK1wiLnBuZ1wiOztcclxuICAgIGlmICghKGF3YWl0IGZzLmV4aXN0cyhzaG90Rm9sZGVyKSkpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYENyZWF0aW5nIGZvbGRlciAnJHtzaG90Rm9sZGVyfSdgKTtcclxuICAgICAgICBhd2FpdCBta2RpcnAoc2hvdEZvbGRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNob3RQYXRoID0gcGF0aC5yZXNvbHZlKHNob3RGb2xkZXIsIGAke3Nob3RGaWxlfS5wbmdgKTtcclxuICAgIGxvZ2dlci5kZWJ1ZyhgVGFraW5nIHNjcmVlbnNob3Q6ICcke3Nob3RQYXRofSdgKTtcclxuXHJcbiAgICBsZXQgdGFrZVNjcmVlblNob3QgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoYGF1LmNhcHR1cmUoJyR7c2hvdEZpbGV9JylgKTtcclxuXHJcbiAgICAgICAgbGV0IHNjcmVlbnNob3RXYWl0VGltZW91dCA9ICh0aGlzLm9wdHMuc2NyZWVuc2hvdFdhaXRUaW1lb3V0IHx8IDEwKSAqIDEwMDA7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBXYWl0aW5nICR7c2NyZWVuc2hvdFdhaXRUaW1lb3V0fSBtcyBmb3Igc2NyZWVuc2hvdCB0byBiZSBnZW5lcmF0ZWQuYCk7XHJcbiAgICAgICAgbGV0IHN0YXJ0TXMgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgIHdoaWxlICgoRGF0ZS5ub3coKSAtIHN0YXJ0TXMpIDwgc2NyZWVuc2hvdFdhaXRUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgIGlmIChhd2FpdCBmcy5oYXNBY2Nlc3Moc2hvdFBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IEIuZGVsYXkoMzAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKCdUaW1lZCBvdXQgd2FpdGluZyBmb3Igc2NyZWVuc2hvdCBmaWxlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjaGVjayB0aGUgcm90YXRpb24sIGFuZCByb3RhdGUgaWYgbmVjZXNzYXJ5XHJcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuZ2V0T3JpZW50YXRpb24oKSA9PT0gJ0xBTkRTQ0FQRScpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdSb3RhdGluZyBsYW5kc2NhcGUgc2NyZWVuc2hvdCcpO1xyXG4gICAgICAgICAgICBhd2FpdCB1dGlscy5yb3RhdGVJbWFnZShzaG90UGF0aCwgLTkwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5jcChzaG90Rm9sZGVyLHRlbXAsZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbG9nZ2VyLmxvZygnc2NyZWVuc2hvdCBkb25lIScpO30pO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHRlc3R3YTsiXX0=